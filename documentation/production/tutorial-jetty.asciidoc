---
title: How to Deploy a Flow Application on Jetty
order: 4
layout: page
---

ifdef::env-github[:outfilesuffix: .asciidoc]

= How to configure Jetty

This document explains how to deploy a compiled production package on a standalone jetty.

Jetty is an open-source project providing an HTTP server, HTTP client, and javax.servlet container.

Jetty application can be deployed in 2 different ways:

. Development Mode
. Standalone Mode

== Development Mode (Embedded Jetty)

Jetty can be used during the development phase of an application to increase the productivity of developers.

Using Jetty has the advantage that it can be instantiated and used in a Java program.

"Don't deploy your application in Jetty, deploy Jetty in your application!" by jetty.

This application is Embedded Jetty.

Embedded Jetty can be used in Vaadin application in 2 different ways:

. Deploying with the Jetty Maven Plugin
. Programmatically (without Maven)

=== Jetty Maven Plugin

The Jetty Maven plugin is useful for rapid development and testing.
You can add it to any webapp project that is structured according to the Maven defaults.

To be able to deploy and run applications with it, we only need to add the plugin in pom.xml:

.pom.xml
[source, xml]
----
<build>
        <plugins>
            <!-- Jetty plugin for easy testing without a server -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.4.11.v20180605</version>
                <configuration>
                    <scanIntervalSeconds>1</scanIntervalSeconds>
                </configuration>
            </plugin>
        </plugins>
    </build>
----

To deploy our app after adding the plugin, we navigate to the root where pom.xml is located and run the following command:

[source,ini]
----
`mvn jetty:run`
----

=== Running Jetty without Maven

Jetty can also be configured to run programmatically. This requires a manual configuration to make it work with Vaadin.

[source,java]
----
public final class JettyTest {
  public static void main(String[] args) throws Exception {
    Server server = new Server(8080);

    Configuration.ClassList classlist = Configuration.ClassList.setServerDefault(server);
    classlist.addAfter("org.eclipse.jetty.webapp.FragmentConfiguration", "org.eclipse.jetty.plus.webapp.EnvConfiguration", "org.eclipse.jetty.plus.webapp.PlusConfiguration");
    classlist.addBefore("org.eclipse.jetty.webapp.JettyWebXmlConfiguration", "org.eclipse.jetty.annotations.AnnotationConfiguration");

    File tempDir = new File(System.getProperty("java.io.tmpdir"), "JettyTest");
    if (tempDir.exists()) {
      if (!tempDir.isDirectory()) {
        throw new RuntimeException("Not a directory: " + tempDir);
      }
    } else if (!tempDir.mkdirs()) {
      throw new RuntimeException("Could not make: " + tempDir);
    }

    WebAppContext context = new WebAppContext();
    context.setInitParameter("productionMode", "false");
    context.setContextPath("");
    context.setExtractWAR(false);
    context.setTempDirectory(tempDir);

    context.addServlet(VaadinServlet.class, "/*");

    context.setAttribute("org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern", ".*");

    context.setParentLoaderPriority(true);
    server.setHandler(context);

    List<Resource> resourceList = new ArrayList<>();
    for (String entry : ClassPathHelper.getAllClassPathEntries()) {
      File file = new File(entry);
      if (entry.endsWith(".jar")) {
        resourceList.add(Resource.newResource("jar:" + file.toURI().toURL() + "!/"));
      } else {
        resourceList.add(Resource.newResource(entry));
      }
    }

    resourceList.add(Resource.newResource("./src/main/webapp"));
    context.setBaseResource(new ResourceCollection(resourceList.toArray(new Resource[0])));

    server.start();
    server.join();
  }
}
----

== Standalone Mode (Production Mode)

When the application has to be deployed on a server, it is necessary to generate a war file with the application in it.

[NOTE]
WAR. Is the extension of a file that packages a web application directory hierarchy in ZIP format and is short for Web Archive. Java web applications are usually packaged as WAR files for deployment.
WAR files can be created on the command line or with an IDE like Eclipse.

It is possible to change the name of the `war` file specifying

.pom.xml
[source, xml]
----
<build>
    <finalName>application</finalName>
    ...
</build>
----

[NOTE]
Remember to activate the prodcution mode when the application is ready for its deployment.
Production Mode can be activated in the following way: `mvn jetty:run-exploded -Pproduction-mode`.
For more information about it, please consult <<tutorial-production-mode-basic#,Taking your Application into Production>>.

===  Deploying by Copying WAR

The easiest way to deploy a web application to Jetty server is probably by copying the WAR file into the $JETTY_HOME/webapps directory.

After copying, we can start the server by navigating to $JETTY_HOME and running the command:

[source,ini]
----
`java -jar start.jar`
----

=== Deploying Using Context File

Jetty web server offers us a way to deploy a web archive located anywhere in the file system by us creating a context file for it.

.jetty-app.xml
[source, xml]
----
<?xml version="1.0"  encoding="ISO-8859-1"?>
<!DOCTYPE Configure PUBLIC "-//Mort Bay Consulting//DTD Configure//EN"
  "http://www.eclipse.org/jetty/configure.dtd">
<Configure class="org.eclipse.jetty.webapp.WebAppContext">
    <Set name="contextPath">/jetty</Set>
    <Set name="war">absolute/path/to/jetty-app.war</Set>
</Configure>
----

== Spring

When the Vaadin Flow application is using Jetty it requires an additional configuration for several aspects of the application.

One example of this, is `urlMapping`.

[source,ini]
----
vaadin.urlMapping=/my_mapping/*
----

An additional Servlet is required to handle the frontend resources for non-root servlets, such as /my_mapping/*. The servlet can be defined in your application class, link:../src/main/java/com/vaadin/flow/tutorial/spring/ExampleServletRegistration.java[see here for an example].

For more information about it, please consult the <<../spring/tutorial-spring-configuration#, Vaadin Spring configuration guide>>.
